USMB2
=====
micro-SMB2   A tiny SMB2 implementation for where size matters.

USMB2 strives to be as small as possible.
The default is no authentication and depending on the server allowing access as a Guest user.
See google for how to enable Guest access for windows file servers or see below for how
to configure samba like that.

Optionally, it can be compiled with NTLMV2 authentication, i.e. normal SMB authentication
by compiling with -DUSMB2_FEATURE_NTLM.
This however adds ~2800bytes of code when compiled for x86_64.

By default it only supprots read-only access to files. Support for usmb2_prwite() and O_RDWR
when opening files can be enabled by compiling with -DUSMB2_FEATURE_WRITE.
This adds about 200 bytes of code size.

Support for opendir/readdir can be enabled with -DUSMB2_FEATURE_OPENDIR. Note, while a direcotry is
open the only supported call is readdir(). If you perform any other usmb2 function calls
to the server, future calls to readdir on the open handle will not work.


At the time of writing, code size is approximately
1300bytes with red/write support but no authentication. I.e. reququires to enable Guest access on the server.
4200bytes with full authentication with user and password.

It avoids memory allocation outside of initialization and uses a context that is
~550 bytes in size.
Each filehandle that is created is 16 bytes in size.


Modules
=======

USMB2 is modular where you cna pick what features you want.
By by default there is no authentication and no write support.

Authentication
--------------
To enable NTLMSSP authentication with NTLMv2, compile with
-DUSMB2_FEATURE_NTLM

Write support
-------------
To enable support to open files with O_RDWR an to write to files, compile
with -DUSMB2_FEATURE_WRITE


LIWP
====
The coe in usmb2.c uses read()/write() to access the socket. Platforms that use special function
to do this may need changes.
For example PS2 IOP LWIP afaik requires the use of lwip_send()/lwip_recv() instead.

#define write(a,b,c) lwip_send(a,b,c,0)
#define read(a,b,c) lwip_recv(a,b,c,0)


See ps2-ubms2-cat.c for a linux example on how to use to map a share and read a file.



If using it without NTLM support you need to configure the server to allow
Guest access. On samba you would do this something like:

-- smb.conf snippet begin --
[global]
        workgroup = SAMBA
        max protocol = SMB3
        min protocol = CORE
        ntlm auth = yes
        null passwords = yes
        lanman auth = yes
        strict sync = no
        keepalive = 0
        security = user
        passdb backend = tdbsam
        usershare allow guests = yes
        name resolve order = lmhosts bcast host wins
        log level = 0
        guest ok = yes
        guest account = nobody
        map to guest = Bad User

[SNAP-1]
        path = /data/SNAP-1
        available = yes
        read only = no
        browsable = yes
        writable = yes
-- smb.conf snippet end --

